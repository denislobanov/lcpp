#include <iostream>
#include <chrono>

#include "database.hpp"
#include "page_data.hpp"
#include "netio.hpp"

using std::cout;
using std::endl;

int main(void)
{
    database my_database("test_db");
    struct page_data_s* my_page = new struct page_data_s;

    std::string test_url = "http://test_url.com/a_test_page.html";

    //create test data
    my_page->rank = 42;
    my_page->crawl_count = 2;
    my_page->last_crawl = std::chrono::system_clock::now();
    my_page->out_links = {"link 1", "link 2", "link 3", "link 4"};
    my_page->meta = {"some", "keywords", "for", "testing"};
    my_page->title = "page title";
    my_page->description = "multi-line description for\ntest page generated by test_database.cpp";

    cout<<"sending page to database.."<<endl;
    my_database.put_page_data(my_page, test_url);

    //flush page
    delete my_page;
    my_page = new struct page_data_s;

    cout<<"reading from database.."<<endl;
    my_database.get_page_data(my_page, test_url);
    
    cout<<"page rank: "<<my_page->rank<<endl;
    cout<<"crawl count: "<<my_page->crawl_count<<endl;
    cout<<"last crawl: "<<std::chrono::system_clock::to_time_t(my_page->last_crawl)<<endl;
    cout<<"page title: "<<my_page->title<<endl;
    cout<<"out links: "<<endl;
    for(auto& x: my_page->out_links)
        cout<<"\t"<<x<<endl;
    cout<<"meta: "<<endl;
    for(auto& x: my_page->meta)
        cout<<"\t"<<x<<endl;
    cout<<"description: ["<<my_page->description<<"]"<<endl;

    test_url = "www.geeksaresexy.net";
    netio my_netio("lcpp robots_txt unit test");
    robots_txt* my_robots_txt = new robots_txt("sdfsdfsdf", test_url);
    my_robots_txt->fetch(my_netio);

    cout<<"\nsending robots_txt to database.."<<endl;
    my_robots_txt->last_visit = 42;
    my_database.put_robots_txt(my_robots_txt, test_url);

    delete my_robots_txt;
    my_robots_txt = new robots_txt("aoeuaoeu", test_url);

    cout<<"reading from database.."<<endl;
    my_database.get_robots_txt(my_robots_txt, test_url);

    cout<<"last visit: "<<my_robots_txt->last_visit<<endl;
    cout<<"crawl delay: "<<my_robots_txt->crawl_delay<<endl;
    cout<<"exclusion list: "<<endl;
    std::vector<std::string> exclusions_list;
    my_robots_txt->export_exclusions(exclusions_list);
    for(auto& x: exclusions_list)
        std::cout<<x<<std::endl;
    
    cout<<"\n~~~\ndone!"<<endl;
    delete my_page;
    return 0;
}
